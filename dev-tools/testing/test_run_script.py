#!/usr/bin/env python3
"""
Test script to verify run.sh functionality.
"""

import subprocess
import sys
import time
from pathlib import Path


def test_run_script():
    """Test the run.sh script."""
    print("üß™ Testing run.sh script functionality")
    print("=" * 50)
    
    # Get project root
    project_root = Path(__file__).parent.parent
    run_script = project_root / "run.sh"
    
    if not run_script.exists():
        print("‚ùå run.sh not found")
        return False
    
    print(f"üìÅ Testing run script: {run_script}")
    
    # Make sure it's executable
    try:
        subprocess.run(["chmod", "+x", str(run_script)], check=True)
        print("‚úÖ Script permissions set")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to set permissions: {e}")
        return False
    
    # Test dry run - check if virtual environment activation works
    try:
        # Just test the virtual environment activation part
        result = subprocess.run([
            "bash", "-c", 
            f"cd {project_root} && "
            "if [ -d '.venv' ]; then "
            "echo 'Virtual environment found'; "
            "source .venv/bin/activate && "
            "echo 'Virtual environment activated'; "
            "python --version; "
            "else "
            "echo 'No virtual environment found'; "
            "fi"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ Virtual environment activation test passed")
            print(f"   Output: {result.stdout.strip()}")
        else:
            print(f"‚ùå Virtual environment test failed: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Virtual environment test timed out")
        return False
    except Exception as e:
        print(f"‚ùå Virtual environment test error: {e}")
        return False
    
    # Test PYTHONPATH setup
    try:
        result = subprocess.run([
            "bash", "-c",
            f"cd {project_root} && "
            "source .venv/bin/activate && "
            "PYTHONPATH=\"$PWD/src:$PYTHONPATH\" python -c "
            "'import sys; print(\"src\" in \" \".join(sys.path))'"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and "True" in result.stdout:
            print("‚úÖ PYTHONPATH setup test passed")
        else:
            print(f"‚ùå PYTHONPATH test failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå PYTHONPATH test error: {e}")
        return False
    
    # Test GUI module import
    try:
        result = subprocess.run([
            "bash", "-c",
            f"cd {project_root} && "
            "source .venv/bin/activate && "
            "PYTHONPATH=\"$PWD/src:$PYTHONPATH\" python -c "
            "'from poe_search.gui import __main__; print(\"GUI import OK\")'"
        ], capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0 and "GUI import OK" in result.stdout:
            print("‚úÖ GUI module import test passed")
        else:
            print(f"‚ùå GUI import test failed")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå GUI import test error: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ run.sh script verification completed successfully!")
    print("‚úÖ Virtual environment activation works")
    print("‚úÖ PYTHONPATH is set correctly")
    print("‚úÖ GUI module can be imported")
    print("‚úÖ Script is ready for use")
    
    return True

def main():
    """Run the test."""
    success = test_run_script()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
