name: Release & Publish

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  discussions: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            PRERELEASE="false"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT
          
          # Validate version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          echo "✅ Version validation passed: $VERSION"

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag --list | grep -q "^${VERSION}$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION is available"

  test-release:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,gui]"

      - name: Run full test suite
        run: |
          pytest tests/ -v --cov=poe_search --cov-report=term-missing

      - name: Test package building
        run: |
          pip install build
          python -m build
          pip install dist/*.whl
          
          # Test CLI installation
          poe-search --version
          
          # Test GUI imports
          python -c "from poe_search.gui import main; print('GUI imports successfully')"

  build-release:
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    outputs:
      artifact-path: ${{ steps.build.outputs.artifact-path }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION_NUM\"/" pyproject.toml
          
          echo "Updated version to $VERSION_NUM in pyproject.toml"

      - name: Build package
        id: build
        run: |
          python -m build
          echo "artifact-path=dist/" >> $GITHUB_OUTPUT

      - name: Verify package
        run: |
          twine check dist/*
          
          # Test installation
          pip install dist/*.whl
          python -c "import poe_search; print(f'Successfully installed poe-search {poe_search.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "### All commits:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "pip install poe-search==${VERSION#v}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## Files" >> release_notes.md
          echo "- 📦 **Wheel**: \`$(basename dist/*.whl)\`" >> release_notes.md
          echo "- 🗃️ **Source**: \`$(basename dist/*.tar.gz)\`" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: "Release ${{ needs.validate-release.outputs.version }}"
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success() && needs.validate-release.outputs.is-prerelease == 'false'
    environment: 
      name: pypi
      url: https://pypi.org/project/poe-search/
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verify-metadata: true

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success() && needs.validate-release.outputs.is-prerelease == 'true'
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/poe-search/
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Create release discussion
        uses: abirismyname/create-discussion@v1.2.0
        with:
          title: "🎉 Release ${{ needs.validate-release.outputs.version }} is now available!"
          body: |
            ## 🎉 New Release: ${{ needs.validate-release.outputs.version }}
            
            A new version of Poe Search has been released!
            
            ### 📦 Installation
            ```bash
            pip install --upgrade poe-search
            ```
            
            ### 🔗 Links
            - 📋 [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
            - 📦 [PyPI Package](https://pypi.org/project/poe-search/)
            - 📚 [Documentation](https://poe-search.readthedocs.io/)
            
            ### 🙏 Thanks
            Thank you to all contributors who made this release possible!
            
            Feel free to ask questions or report any issues in this discussion.
          category-id: "announcements"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
