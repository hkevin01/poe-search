name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 6 AM UTC
    - cron: "0 6 * * 1"
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update to perform"
        required: false
        default: "minor"
        type: choice
        options:
          - patch
          - minor
          - major
          - security
      dependency_group:
        description: "Dependency group to update"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - production
          - development
          - gui
          - docs

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-summary: ${{ steps.check.outputs.update-summary }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety

      - name: Check for security vulnerabilities
        id: security-check
        run: |
          pip install -e .
          safety check --json --output security-report.json || true
          
      - name: Check for dependency updates
        id: check
        run: |
          # Create a summary of available updates
          pip list --outdated --format=json > outdated.json
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "Found dependency updates available"
            
            # Create summary
            python -c "
          import json
          with open('outdated.json') as f:
              outdated = json.load(f)
          
          summary = []
          for pkg in outdated:
              summary.append(f\"- {pkg['name']}: {pkg['version']} â†’ {pkg['latest_version']}\")
          
          update_summary = '\n'.join(summary[:10])  # Limit to first 10
          if len(outdated) > 10:
              update_summary += f'\n... and {len(outdated) - 10} more'
          
          print(f'update-summary<<EOF\n{update_summary}\nEOF')
          " >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          fi

  update-dependencies:
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true'
    
    strategy:
      matrix:
        update-type: 
          - patch
          - minor

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install update tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pur

      - name: Update dependencies (${{ matrix.update-type }})
        run: |
          case "${{ matrix.update-type }}" in
            "patch")
              pur -r requirements.txt --patch
              ;;
            "minor")  
              pur -r requirements.txt --minor
              ;;
            "major")
              pur -r requirements.txt
              ;;
          esac
          
          # Update pyproject.toml dependencies if needed
          if [ -f "pyproject.toml" ]; then
            echo "Updating pyproject.toml dependencies..."
            # For now, manual updates - could be automated with tools like poetry
          fi

      - name: Test updated dependencies
        run: |
          pip install -e ".[dev,gui]"
          python -m pytest tests/ -x --tb=short
          
      - name: Create Pull Request
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies (${{ matrix.update-type }})"
          title: "ðŸ“¦ Dependency Updates (${{ matrix.update-type }})"
          body: |
            ## ðŸ“¦ Dependency Updates
            
            This PR contains ${{ matrix.update-type }} dependency updates.
            
            ### Changes:
            ${{ needs.check-dependencies.outputs.update-summary }}
            
            ### Testing:
            - âœ… All tests pass with updated dependencies
            - âœ… No security vulnerabilities detected
            
            ### Notes:
            - This is an automated PR created by the dependency update workflow
            - Please review changes before merging
            - Consider running additional integration tests
            
            Generated by workflow: `${{ github.workflow }}`
          branch: dependency-updates/${{ matrix.update-type }}-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated-pr
            ${{ matrix.update-type }}-update
